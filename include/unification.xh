#include <string.xh>
#include <vector.xh>
#include <alloca.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef _UNIFICATION_XH
#define _UNIFICATION_XH

template<a>
datatype _var_d {
  _Free();
  _Bound(a val);
  _BoundVar(a ?var);
};

template<a>
_Bool is_bound(a ?var) {
  return match ((inst _var_d<a> *)var)
    (&_Free() -> 0;
     &_Bound(_) -> 1;
     &_BoundVar(other_var) -> inst is_bound<a>(other_var););
}

template<a>
a value(a ?var) {
  match ((inst _var_d<a> *)var) {
    &_Free() -> {
      fprintf(stderr, "Error: Cannot access value of free variable %s\n", show(var).text);
      exit(1);
    }
    &_Bound(val) -> {
      return val;
    }
    &_BoundVar(other_var) -> {
      return inst value<a>(other_var);
    }
  }
}

template<a>
string show_var(a ?var) {
  if (inst is_bound<a>(var)) {
    return "?&" + show(inst value<a>(var));
  } else{
    char buffer[24];
    sprintf(buffer, "<var %lx>", (void *)var);
    return str(buffer);
  }
}

typedef vector<enum _var_d_tag *> unification_trail_t;

static void undo_trail(unification_trail_t trail) {
  trail.length;
  for (size_t i = 0; i < trail.length; i++) {
   *trail[i] = _var_d__Free;
  }
  inst resize_vector<enum _var_d_tag *>(trail, 0);
}

template<a>
_Bool _unify_var_val(a ?var, a val, unification_trail_t trail) {
  match ((inst _var_d<a> *)var) {
    v@&_Free() -> {
      *v = inst _Bound<a>(val);
      if ((void*)trail) {
        trail.append(&v->tag);
      }
      return 1;
    }
    &_Bound(other_val) -> {
      return unify(other_val, val, trail);
    }
    &_BoundVar(other_var) -> {
      return inst _unify_var_val<a>(other_var, val, trail);
    }
  }
}

template<a>
_Bool _unify_var_var(a ?var1, a? var2, unification_trail_t trail) {
  match ((inst _var_d<a> *)var1) {
    v@&_Free() -> {
      *v = inst _BoundVar<a>(var2);
      if ((void*)trail) {
        trail.append(&v->tag);
      }
      return 1;
    }
    &_Bound(other_val) -> {
      return inst _unify_var_val<a>(var2, other_val, trail);
    }
    &_BoundVar(other_var) -> {
      return inst _unify_var_var<a>(other_var, var2, trail);
    }
  }
}

#endif

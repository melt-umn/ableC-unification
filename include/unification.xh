#include <string.xh>
#include <vector.xh>
#include <alloca.h>
#include <stdlib.h>
#include <stdio.h>

#ifndef _UNIFICATION_XH
#define _UNIFICATION_XH

template<typename a>
datatype _var_d {
  _Free();
  _Bound(a val);
  _BoundVar(a ?var);
};

template<typename a>
void delete_var(void (*dealloc)(void *), a ?var) {
  dealloc((_var_d<a> *)var);
}

template<typename a>
_Bool is_bound(a ?var) {
  return match ((_var_d<a> *)var)
    (&_Free() -> 0;
     &_Bound(_) -> 1;
     &_BoundVar(other_var) -> is_bound(other_var););
}

template<typename a>
a value(a ?var) {
  match ((_var_d<a> *)var) {
    &_Free() -> {
      fprintf(stderr, "Error: Cannot access value of free variable\n");
      abort();
    }
    &_Bound(val) -> {
      return val;
    }
    &_BoundVar(other_var) -> {
      return value(other_var);
    }
  }
}

template<typename a>
a value_loc(a ?var, const char *loc) {
  match ((_var_d<a> *)var) {
    &_Free() -> {
      fprintf(stderr, "Error: Value demanded of free variable at %s\n", loc);
      abort();
    }
    &_Bound(val) -> {
      return val;
    }
    &_BoundVar(other_var) -> {
      return value(other_var);
    }
  }
}

template<typename a>
a ?base_var(a ?var) {
  match ((_var_d<a> *)var) {
    &_Free() -> {
      return var;
    }
    &_Bound(val) -> {
      fprintf(stderr, "Error: Cannot access base of bound variable\n");
      abort();
    }
    &_BoundVar(other_var) -> {
      return base_var(other_var);
    }
  }
}

template<typename a>
string show_var(a ?var) {
  match ((void *)var, var) {
    NULL, _ -> {
      return str("<var (nil)>");
    }
    _, freevar -> {
      char buffer[24];
      sprintf(buffer, "<var %x>", (union {a ?v; unsigned n;}){.v = base_var(var)}.n);
      return str(buffer);
    }
    _, ?&val -> {
      return show(val);
    }
  }
}

template<typename a>
string str_var(a ?var) {
  match ((void *)var, var) {
    NULL, _ -> {
      return str("<var (nil)>");
    }
    _, freevar -> {
      char buffer[24];
      sprintf(buffer, "<var %x>", (union {a ?v; unsigned n;}){.v = base_var(var)}.n);
      return str(buffer);
    }
    _, ?&val -> {
      return str(val);
    }
  }
}

datatype _trail_action {
  _Sub(enum _var_d_tag *tag);
  _Action(closure<(void) -> void> action, void (*freeFn)(void *));
}

typedef vector<datatype _trail_action> unification_trail;

static inline unification_trail new_trail(void) {
  return new unification_trail(0, _Sub(NULL), malloc, realloc, free);
}

static inline void push_action(unification_trail trail, closure<(void) -> void> action, void (*freeFn)(void *)) {
  trail.append(_Action(action, freeFn));
}

static inline void undo_trail(unification_trail trail, size_t index) {
  for (size_t i = trail.length; i > index; i--) {
    match (trail[i - 1]) {
      _Sub(tag) -> {
        *tag = _var_d__Free;
      }
      _Action(action, freeFn) -> {
        action();
        if (freeFn) {
          action.free(*freeFn);
        }
      }
    }
  }
  resize_vector(trail, index);
}

template<typename a>
_Bool _unify_var_val(a ?var, a val, unification_trail trail) {
  match ((_var_d<a> *)var) {
    v@&_Free() -> {
      *v = _Bound(val);
      if ((void*)trail) {
        trail.append(_Sub(&v->tag));
      }
      return 1;
    }
    &_Bound(other_val) -> {
      return unify(other_val, val, trail);
    }
    &_BoundVar(other_var) -> {
      return _unify_var_val(other_var, val, trail);
    }
  }
}

template<typename a>
_Bool _unify_var_var(a ?var1, a? var2, unification_trail trail) {
  match ((_var_d<a> *)var1, (_var_d<a> *)var2) {
    v1@&_Free(), v2@&_Free() -> {
      if (v1 != v2) {
        *v1 = _BoundVar(var2);
        if ((void*)trail) {
          trail.append(_Sub(&v1->tag));
        }
      }
      return 1;
    }
    &_Free(), _ -> {
      return _unify_var_var(var2, var1, trail);
    }
    &_Bound(other_val), _ -> {
      return _unify_var_val(var2, other_val, trail);
    }
    &_BoundVar(other_var), _ -> {
      return _unify_var_var(other_var, var2, trail);
    }
  }
}

#endif
